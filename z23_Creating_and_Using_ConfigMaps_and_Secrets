z23_Creating_and_Using_ConfigMaps_and_Secrets
=============================================

Creating a ConfigMap
--------------------

Exposing ConfigMaps to Containers
---------------------------------
- ConfigMaps can be exposed as plain files in the filesystem of a container
  - this is achieved by declaring a volume and mounting it in the container
  - this is particularly effective for ConfigMaps containing whole files
- ConfigMaps can be exposed as environment variables in the container
  - this is achieved with the Downward API
  - this is particularly effective for ConfigMaps containing individual parameters


Passing a configuration file with a ConfigMap
---------------------------------------------
- we will start a load balancer powered by HAProxy
- we will use the official haproxy image
- it expects to find its configuration in /usr/local/etc/haproxy/haproxy.cfg
- we will provide a simple HAProxy configuration
- it listens on port 80, and load balances connections between IBM & Google

Creating the ConfigMap
----------------------
- download the simple HAProxy config :
  - curl -O https://k8smastery.com/haproxy.cfg
- create a ConfigMap names haproxy and holding the configuration file
  - kubectl create configmap haproxy --from-file=haproxy.cfg
- check what our ConfigMap looks like :
  - kubectl get configmap haproxy -o yaml
apiVersion: v1
data:
  haproxy.cfg: |+
    global
      daemon
      maxconn 256

    defaults
      mode tcp
      timeout connect 5000ms
      timeout client 50000ms
      timeout server 50000ms

    frontend the-frontend
      bind *:80
      default_backend the-backend

    backend the-backend
      server google.com-80 google.com:80 maxconn 32 check
      server ibm.fr-80 ibm.fr:80 maxconn 32 check

kind: ConfigMap
metadata:
  creationTimestamp: "2020-07-15T15:40:30Z"
  name: haproxy
  namespace: default
  resourceVersion: "2060056"
  selfLink: /api/v1/namespaces/default/configmaps/haproxy
  uid: 7734db84-2fb7-4ba2-a9e0-e507e04bf1c1


Using a ConfigMap
-----------------
- use the following pod definition :
 - curl -O https://k8smastery.com/haproxy.yaml
 $ cat haproxy.yaml
apiVersion: v1
kind: Pod
metadata:
  name: haproxy
spec:
  volumes:
  - name: config
    configMap:
      name: haproxy
  containers:
  - name: haproxy
    image: haproxy:1
    volumeMounts:
    - name: config
      mountPath: /usr/local/etc/haproxy/

- create the pod
  - kubectl apply -f haproxy.yaml
- check the IP address allocated to the pod inside shpod
  - kubectl get pod haproxy -o wide
NAME      READY   STATUS    RESTARTS   AGE   IP         NODE             NOMINATED NODE   READINESS GATES
haproxy   1/1     Running   0          15s   10.1.1.1   docker-desktop   <none>           <none>
  -

Testing our load balancer
-------------------------
- the load balancer will send :
  - 1/2 the connections to Google
  - 1/2 to IBM
- access the load balancer a few times
  - curl $IP  {a few times inside shpod}
  - check the HREF "..document has moved.." tags below
  $ curl $IP
  <HTML><HEAD><meta http-equiv="content-type" content="text/html;charset=utf-8">
  <TITLE>301 Moved</TITLE></HEAD><BODY>
  <H1>301 Moved</H1>
  The document has moved
  <A HREF="http://www.google.com/">here</A>.
  </BODY></HTML>
  [192.168.65.3] (kubernetes:default) root@shpod ~
  $ curl $IP
  <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
  <html><head>
  <title>301 Moved Permanently</title>
  </head><body>
  <h1>Moved Permanently</h1>
  <p>The document has moved <a href="http://www.ibm.com/">here</a>.</p>
  </body></html>


ConfigMaps + Downward API
-------------------------
- we are going to run a Docker registry on a custom port
- by default, the registry listens on port 5000
- this can be changed by setting environment variable REGISTRY_HTTP_ADDR
- we are going to store the port number in a ConfigMap
- then we will expose that ConfigMap as a container environment variable

  Creating The ConfigMap
  ----------------------
  - our configmap will have a single key, http.addr
    - kubectl create configmap registry --from-literal=http.addr=0.0.0.0:80
  - check our configMap
    - kubectl get configmap registry -o yaml
apiVersion: v1
data:
  http.addr: 0.0.0.0:80
kind: ConfigMap
metadata:
  creationTimestamp: "2020-07-15T16:13:04Z"
  name: registry
  namespace: default
  resourceVersion: "2063417"
  selfLink: /api/v1/namespaces/default/configmaps/registry
  uid: a1ca65c4-7615-4555-b3ce-3700cc785e70


Using the ConfigMap
-------------------
- use the following pod definition :
- curl -O https://k8smastery.com/registry.yaml
apiVersion: v1
kind: Pod
metadata:
  name: registry
spec:
  containers:
  - name: registry
    image: registry
    env:
    - name: REGISTRY_HTTP_ADDR
      valueFrom:
        configMapKeyRef:
          name: registry
          key: http.addr

- create the registry pod
  - kubectl apply -f registry.yaml
- check the IP address allocated to the pod inside shpod
  - kubectl get pod registry -o wide
  NAME       READY   STATUS    RESTARTS   AGE   IP         NODE             NOMINATED NODE   READINESS GATES
  registry   1/1     Running   0          13m   10.1.1.2   docker-desktop   <none>           <none>
- IP=$(kubectl get pod registry -o json | jq -r .status.podIP)
- curl $IP/v2/_catalog
{"repositories":[]}  <- proves it is up/running - empty because we haven't added any images


K8s Secrets
-----------

Passwords, tokens, sensitive information
----------------------------------------
- for sensitive information, there is another special resource : Secrets
- secrets and ConfigMaps work almost the same way {see below}
- the intent is different, though :
  - "You should use secrets for things which are actually secret, like API keys, credentials, etc., and
     use ConfigMaps for not secret configuration data."
  - "In the future, there will likely be some differentiators for secrets like rotation or support
     for backing the secret API w/HSMs, etc "


Differences between ConfigMaps & Secrets
----------------------------------------
- Secrets are base64-encoded when shown with 'kubectl get secrets -o yaml'
  - keep in mind that this is just encoding, NOT encryption
  - it is very easy to automatically extract & decode secrets
- Secrets at rest can be encrypted at rest
- with RBAC, we can authorise a user to access ConfigMaps, but not secrets
  - since they are 2 different kinds of resources

- created, accessed exactly as ConfigMaps - just use 'secret' resource name


Cleanup after ConfigMaps
------------------------
- kubectl delete pod/haproxy pod/registry
